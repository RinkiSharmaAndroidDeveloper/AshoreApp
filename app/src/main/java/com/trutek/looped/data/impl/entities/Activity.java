package com.trutek.looped.data.impl.entities;

import com.trutek.looped.data.impl.entities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ACTIVITY".
 */
public class Activity {

    private Long id;
    private String subject;
    private String body;
    private String picUrl;
    private String picData;
    private String type;
    private java.util.Date dueDate;
    private java.util.Date updated_At;
    private Boolean isPrivate;
    private Boolean isMine;
    private String serverId;
    private java.util.Date timeStamp;
    private String syncStatus;
    private Long communityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActivityDao myDao;

    private Community community;
    private Long community__resolvedKey;


    public Activity() {
    }

    public Activity(Long id) {
        this.id = id;
    }

    public Activity(Long id, String subject, String body, String picUrl, String picData, String type, java.util.Date dueDate, java.util.Date updated_At, Boolean isPrivate, Boolean isMine, String serverId, java.util.Date timeStamp, String syncStatus, Long communityId) {
        this.id = id;
        this.subject = subject;
        this.body = body;
        this.picUrl = picUrl;
        this.picData = picData;
        this.type = type;
        this.dueDate = dueDate;
        this.updated_At = updated_At;
        this.isPrivate = isPrivate;
        this.isMine = isMine;
        this.serverId = serverId;
        this.timeStamp = timeStamp;
        this.syncStatus = syncStatus;
        this.communityId = communityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActivityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public String getPicUrl() {
        return picUrl;
    }

    public void setPicUrl(String picUrl) {
        this.picUrl = picUrl;
    }

    public String getPicData() {
        return picData;
    }

    public void setPicData(String picData) {
        this.picData = picData;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public java.util.Date getDueDate() {
        return dueDate;
    }

    public void setDueDate(java.util.Date dueDate) {
        this.dueDate = dueDate;
    }

    public java.util.Date getUpdated_At() {
        return updated_At;
    }

    public void setUpdated_At(java.util.Date updated_At) {
        this.updated_At = updated_At;
    }

    public Boolean getIsPrivate() {
        return isPrivate;
    }

    public void setIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
    }

    public Boolean getIsMine() {
        return isMine;
    }

    public void setIsMine(Boolean isMine) {
        this.isMine = isMine;
    }

    public String getServerId() {
        return serverId;
    }

    public void setServerId(String serverId) {
        this.serverId = serverId;
    }

    public java.util.Date getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(java.util.Date timeStamp) {
        this.timeStamp = timeStamp;
    }

    public String getSyncStatus() {
        return syncStatus;
    }

    public void setSyncStatus(String syncStatus) {
        this.syncStatus = syncStatus;
    }

    public Long getCommunityId() {
        return communityId;
    }

    public void setCommunityId(Long communityId) {
        this.communityId = communityId;
    }

    /** To-one relationship, resolved on first access. */
    public Community getCommunity() {
        Long __key = this.communityId;
        if (community__resolvedKey == null || !community__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommunityDao targetDao = daoSession.getCommunityDao();
            Community communityNew = targetDao.load(__key);
            synchronized (this) {
                community = communityNew;
            	community__resolvedKey = __key;
            }
        }
        return community;
    }

    public void setCommunity(Community community) {
        synchronized (this) {
            this.community = community;
            communityId = community == null ? null : community.getId();
            community__resolvedKey = communityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
