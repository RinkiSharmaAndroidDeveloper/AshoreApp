package com.trutek.looped.data.impl.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trutek.looped.data.impl.entities.Community;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMUNITY".
*/
public class CommunityDao extends AbstractDao<Community, Long> {

    public static final String TABLENAME = "COMMUNITY";

    /**
     * Properties of entity Community.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property MembersCount = new Property(3, String.class, "membersCount", false, "MEMBERS_COUNT");
        public final static Property FriendsCount = new Property(4, Integer.class, "friendsCount", false, "FRIENDS_COUNT");
        public final static Property PicUrl = new Property(5, String.class, "picUrl", false, "PIC_URL");
        public final static Property PicData = new Property(6, String.class, "picData", false, "PIC_DATA");
        public final static Property IsPrivate = new Property(7, Boolean.class, "isPrivate", false, "IS_PRIVATE");
        public final static Property IsMine = new Property(8, Boolean.class, "isMine", false, "IS_MINE");
        public final static Property ServerId = new Property(9, String.class, "serverId", false, "SERVER_ID");
        public final static Property TimeStamp = new Property(10, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property SyncStatus = new Property(11, String.class, "syncStatus", false, "SYNC_STATUS");
    };

    private DaoSession daoSession;


    public CommunityDao(DaoConfig config) {
        super(config);
    }
    
    public CommunityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMUNITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SUBJECT\" TEXT," + // 1: subject
                "\"BODY\" TEXT," + // 2: body
                "\"MEMBERS_COUNT\" TEXT," + // 3: membersCount
                "\"FRIENDS_COUNT\" INTEGER," + // 4: friendsCount
                "\"PIC_URL\" TEXT," + // 5: picUrl
                "\"PIC_DATA\" TEXT," + // 6: picData
                "\"IS_PRIVATE\" INTEGER," + // 7: isPrivate
                "\"IS_MINE\" INTEGER," + // 8: isMine
                "\"SERVER_ID\" TEXT," + // 9: serverId
                "\"TIME_STAMP\" INTEGER," + // 10: timeStamp
                "\"SYNC_STATUS\" TEXT);"); // 11: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMUNITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Community entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        String membersCount = entity.getMembersCount();
        if (membersCount != null) {
            stmt.bindString(4, membersCount);
        }
 
        Integer friendsCount = entity.getFriendsCount();
        if (friendsCount != null) {
            stmt.bindLong(5, friendsCount);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(6, picUrl);
        }
 
        String picData = entity.getPicData();
        if (picData != null) {
            stmt.bindString(7, picData);
        }
 
        Boolean isPrivate = entity.getIsPrivate();
        if (isPrivate != null) {
            stmt.bindLong(8, isPrivate ? 1L: 0L);
        }
 
        Boolean isMine = entity.getIsMine();
        if (isMine != null) {
            stmt.bindLong(9, isMine ? 1L: 0L);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(10, serverId);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(11, timeStamp.getTime());
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(12, syncStatus);
        }
    }

    @Override
    protected void attachEntity(Community entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Community readEntity(Cursor cursor, int offset) {
        Community entity = new Community( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // membersCount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // friendsCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picData
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isPrivate
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isMine
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // serverId
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // timeStamp
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // syncStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Community entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMembersCount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFriendsCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPicUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsPrivate(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsMine(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setServerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTimeStamp(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setSyncStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Community entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Community entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
