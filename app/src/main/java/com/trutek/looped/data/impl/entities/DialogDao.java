package com.trutek.looped.data.impl.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trutek.looped.data.impl.entities.Dialog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIALOG".
*/
public class DialogDao extends AbstractDao<Dialog, Long> {

    public static final String TABLENAME = "DIALOG";

    /**
     * Properties of entity Dialog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DialogId = new Property(1, String.class, "dialogId", false, "DIALOG_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property LastMessage = new Property(3, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property LastMessageDateSent = new Property(4, Long.class, "lastMessageDateSent", false, "LAST_MESSAGE_DATE_SENT");
        public final static Property LastMessageUserId = new Property(5, Integer.class, "lastMessageUserId", false, "LAST_MESSAGE_USER_ID");
        public final static Property UserId = new Property(6, Integer.class, "userId", false, "USER_ID");
        public final static Property XmppRoomJid = new Property(7, String.class, "xmppRoomJid", false, "XMPP_ROOM_JID");
        public final static Property UnreadMessagesCount = new Property(8, Integer.class, "unreadMessagesCount", false, "UNREAD_MESSAGES_COUNT");
        public final static Property ImageUrl = new Property(9, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
        public final static Property TimeStamp = new Property(12, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
    };


    public DialogDao(DaoConfig config) {
        super(config);
    }
    
    public DialogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIALOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DIALOG_ID\" TEXT UNIQUE ," + // 1: dialogId
                "\"NAME\" TEXT," + // 2: name
                "\"LAST_MESSAGE\" TEXT," + // 3: lastMessage
                "\"LAST_MESSAGE_DATE_SENT\" INTEGER," + // 4: lastMessageDateSent
                "\"LAST_MESSAGE_USER_ID\" INTEGER," + // 5: lastMessageUserId
                "\"USER_ID\" INTEGER," + // 6: userId
                "\"XMPP_ROOM_JID\" TEXT," + // 7: xmppRoomJid
                "\"UNREAD_MESSAGES_COUNT\" INTEGER," + // 8: unreadMessagesCount
                "\"IMAGE_URL\" TEXT," + // 9: imageUrl
                "\"TYPE\" TEXT," + // 10: type
                "\"STATUS\" INTEGER," + // 11: status
                "\"TIME_STAMP\" INTEGER);"); // 12: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIALOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dialog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dialogId = entity.getDialogId();
        if (dialogId != null) {
            stmt.bindString(2, dialogId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(4, lastMessage);
        }
 
        Long lastMessageDateSent = entity.getLastMessageDateSent();
        if (lastMessageDateSent != null) {
            stmt.bindLong(5, lastMessageDateSent);
        }
 
        Integer lastMessageUserId = entity.getLastMessageUserId();
        if (lastMessageUserId != null) {
            stmt.bindLong(6, lastMessageUserId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
 
        String xmppRoomJid = entity.getXmppRoomJid();
        if (xmppRoomJid != null) {
            stmt.bindString(8, xmppRoomJid);
        }
 
        Integer unreadMessagesCount = entity.getUnreadMessagesCount();
        if (unreadMessagesCount != null) {
            stmt.bindLong(9, unreadMessagesCount);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(10, imageUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(13, timeStamp.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dialog readEntity(Cursor cursor, int offset) {
        Dialog entity = new Dialog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dialogId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastMessage
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lastMessageDateSent
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lastMessageUserId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // xmppRoomJid
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // unreadMessagesCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imageUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // status
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // timeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dialog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDialogId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastMessageDateSent(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLastMessageUserId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setXmppRoomJid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnreadMessagesCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setImageUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTimeStamp(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dialog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dialog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
