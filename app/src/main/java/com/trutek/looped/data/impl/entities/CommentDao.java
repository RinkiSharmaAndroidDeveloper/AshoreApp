package com.trutek.looped.data.impl.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trutek.looped.data.impl.entities.Comment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT".
*/
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "SERVER_ID");
        public final static Property ProfileId = new Property(2, String.class, "profileId", false, "PROFILE_ID");
        public final static Property CommunityId = new Property(3, String.class, "communityId", false, "COMMUNITY_ID");
        public final static Property ActivityId = new Property(4, String.class, "activityId", false, "ACTIVITY_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Text = new Property(6, String.class, "text", false, "TEXT");
        public final static Property PicUrl = new Property(7, String.class, "picUrl", false, "PIC_URL");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
        public final static Property Subject = new Property(9, String.class, "subject", false, "SUBJECT");
    };


    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVER_ID\" TEXT," + // 1: serverId
                "\"PROFILE_ID\" TEXT," + // 2: profileId
                "\"COMMUNITY_ID\" TEXT," + // 3: communityId
                "\"ACTIVITY_ID\" TEXT," + // 4: activityId
                "\"NAME\" TEXT," + // 5: name
                "\"TEXT\" TEXT," + // 6: text
                "\"PIC_URL\" TEXT," + // 7: picUrl
                "\"DATE\" INTEGER," + // 8: date
                "\"SUBJECT\" TEXT);"); // 9: subject
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String profileId = entity.getProfileId();
        if (profileId != null) {
            stmt.bindString(3, profileId);
        }
 
        String communityId = entity.getCommunityId();
        if (communityId != null) {
            stmt.bindString(4, communityId);
        }
 
        String activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindString(5, activityId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(7, text);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(8, picUrl);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(10, subject);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // profileId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // communityId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // activityId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // text
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picUrl
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // subject
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProfileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommunityId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActivityId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setSubject(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
