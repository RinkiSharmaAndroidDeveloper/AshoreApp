package com.trutek.looped.data.impl.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trutek.looped.data.impl.entities.Attachment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTACHMENT".
*/
public class AttachmentDao extends AbstractDao<Attachment, Long> {

    public static final String TABLENAME = "ATTACHMENT";

    /**
     * Properties of entity Attachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AttachmentId = new Property(1, String.class, "attachmentId", false, "ATTACHMENT_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Size = new Property(4, Double.class, "size", false, "SIZE");
        public final static Property URL = new Property(5, String.class, "URL", false, "URL");
        public final static Property AdditionalInfo = new Property(6, String.class, "additionalInfo", false, "ADDITIONAL_INFO");
        public final static Property TimeStamp = new Property(7, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property SyncStatus = new Property(8, Integer.class, "syncStatus", false, "SYNC_STATUS");
    };


    public AttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public AttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTACHMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ATTACHMENT_ID\" TEXT UNIQUE ," + // 1: attachmentId
                "\"TYPE\" TEXT," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"SIZE\" REAL," + // 4: size
                "\"URL\" TEXT," + // 5: URL
                "\"ADDITIONAL_INFO\" TEXT," + // 6: additionalInfo
                "\"TIME_STAMP\" INTEGER," + // 7: timeStamp
                "\"SYNC_STATUS\" INTEGER);"); // 8: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTACHMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String attachmentId = entity.getAttachmentId();
        if (attachmentId != null) {
            stmt.bindString(2, attachmentId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double size = entity.getSize();
        if (size != null) {
            stmt.bindDouble(5, size);
        }
 
        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(6, URL);
        }
 
        String additionalInfo = entity.getAdditionalInfo();
        if (additionalInfo != null) {
            stmt.bindString(7, additionalInfo);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(8, timeStamp.getTime());
        }
 
        Integer syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindLong(9, syncStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attachment readEntity(Cursor cursor, int offset) {
        Attachment entity = new Attachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // attachmentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // URL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // additionalInfo
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // timeStamp
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // syncStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttachmentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setURL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdditionalInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeStamp(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setSyncStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
