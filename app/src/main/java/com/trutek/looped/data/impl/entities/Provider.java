package com.trutek.looped.data.impl.entities;

import com.trutek.looped.data.impl.entities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PROVIDER".
 */
public class Provider {

    private Long id;
    private String name;
    private String number;
    private Long recipientId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProviderDao myDao;

    private Provider provider;
    private Long provider__resolvedKey;


    public Provider() {
    }

    public Provider(Long id) {
        this.id = id;
    }

    public Provider(Long id, String name, String number, Long recipientId) {
        this.id = id;
        this.name = name;
        this.number = number;
        this.recipientId = recipientId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProviderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Long getRecipientId() {
        return recipientId;
    }

    public void setRecipientId(Long recipientId) {
        this.recipientId = recipientId;
    }

    /** To-one relationship, resolved on first access. */
    public Provider getProvider() {
        Long __key = this.recipientId;
        if (provider__resolvedKey == null || !provider__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProviderDao targetDao = daoSession.getProviderDao();
            Provider providerNew = targetDao.load(__key);
            synchronized (this) {
                provider = providerNew;
            	provider__resolvedKey = __key;
            }
        }
        return provider;
    }

    public void setProvider(Provider provider) {
        synchronized (this) {
            this.provider = provider;
            recipientId = provider == null ? null : provider.getId();
            provider__resolvedKey = recipientId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
