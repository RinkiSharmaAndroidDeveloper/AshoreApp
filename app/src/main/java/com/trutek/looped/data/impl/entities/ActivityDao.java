package com.trutek.looped.data.impl.entities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.trutek.looped.data.impl.entities.Activity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITY".
*/
public class ActivityDao extends AbstractDao<Activity, Long> {

    public static final String TABLENAME = "ACTIVITY";

    /**
     * Properties of entity Activity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property PicUrl = new Property(3, String.class, "picUrl", false, "PIC_URL");
        public final static Property PicData = new Property(4, String.class, "picData", false, "PIC_DATA");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property DueDate = new Property(6, java.util.Date.class, "dueDate", false, "DUE_DATE");
        public final static Property Updated_At = new Property(7, java.util.Date.class, "updated_At", false, "UPDATED__AT");
        public final static Property IsPrivate = new Property(8, Boolean.class, "isPrivate", false, "IS_PRIVATE");
        public final static Property IsMine = new Property(9, Boolean.class, "isMine", false, "IS_MINE");
        public final static Property ServerId = new Property(10, String.class, "serverId", false, "SERVER_ID");
        public final static Property TimeStamp = new Property(11, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property SyncStatus = new Property(12, String.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property CommunityId = new Property(13, Long.class, "communityId", false, "COMMUNITY_ID");
    };

    private DaoSession daoSession;

    private Query<Activity> community_ActivityListQuery;

    public ActivityDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SUBJECT\" TEXT," + // 1: subject
                "\"BODY\" TEXT," + // 2: body
                "\"PIC_URL\" TEXT," + // 3: picUrl
                "\"PIC_DATA\" TEXT," + // 4: picData
                "\"TYPE\" TEXT," + // 5: type
                "\"DUE_DATE\" INTEGER," + // 6: dueDate
                "\"UPDATED__AT\" INTEGER," + // 7: updated_At
                "\"IS_PRIVATE\" INTEGER," + // 8: isPrivate
                "\"IS_MINE\" INTEGER," + // 9: isMine
                "\"SERVER_ID\" TEXT," + // 10: serverId
                "\"TIME_STAMP\" INTEGER," + // 11: timeStamp
                "\"SYNC_STATUS\" TEXT," + // 12: syncStatus
                "\"COMMUNITY_ID\" INTEGER);"); // 13: communityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
 
        String picData = entity.getPicData();
        if (picData != null) {
            stmt.bindString(5, picData);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        java.util.Date dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindLong(7, dueDate.getTime());
        }
 
        java.util.Date updated_At = entity.getUpdated_At();
        if (updated_At != null) {
            stmt.bindLong(8, updated_At.getTime());
        }
 
        Boolean isPrivate = entity.getIsPrivate();
        if (isPrivate != null) {
            stmt.bindLong(9, isPrivate ? 1L: 0L);
        }
 
        Boolean isMine = entity.getIsMine();
        if (isMine != null) {
            stmt.bindLong(10, isMine ? 1L: 0L);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(11, serverId);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(12, timeStamp.getTime());
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(13, syncStatus);
        }
 
        Long communityId = entity.getCommunityId();
        if (communityId != null) {
            stmt.bindLong(14, communityId);
        }
    }

    @Override
    protected void attachEntity(Activity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Activity readEntity(Cursor cursor, int offset) {
        Activity entity = new Activity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picData
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dueDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updated_At
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isPrivate
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isMine
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // serverId
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // timeStamp
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // syncStatus
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // communityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Activity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDueDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdated_At(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setIsPrivate(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsMine(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setServerId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTimeStamp(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSyncStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCommunityId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Activity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Activity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "activityList" to-many relationship of Community. */
    public List<Activity> _queryCommunity_ActivityList(Long communityId) {
        synchronized (this) {
            if (community_ActivityListQuery == null) {
                QueryBuilder<Activity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CommunityId.eq(null));
                community_ActivityListQuery = queryBuilder.build();
            }
        }
        Query<Activity> query = community_ActivityListQuery.forCurrentThread();
        query.setParameter(0, communityId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCommunityDao().getAllColumns());
            builder.append(" FROM ACTIVITY T");
            builder.append(" LEFT JOIN COMMUNITY T0 ON T.\"COMMUNITY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Activity loadCurrentDeep(Cursor cursor, boolean lock) {
        Activity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Community community = loadCurrentOther(daoSession.getCommunityDao(), cursor, offset);
        entity.setCommunity(community);

        return entity;    
    }

    public Activity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Activity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Activity> list = new ArrayList<Activity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Activity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Activity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
