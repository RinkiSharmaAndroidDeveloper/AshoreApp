package com.trutek.looped.data.impl.entities;

import com.trutek.looped.data.impl.entities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TAG".
 */
public class Tag {

    private Long id;
    private String name;
    private String serverId;
    private String communityId;
    private java.util.Date timeStamp;
    private String syncStatus;
    private Long profileId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TagDao myDao;

    private Profile profile;
    private Long profile__resolvedKey;


    public Tag() {
    }

    public Tag(Long id) {
        this.id = id;
    }

    public Tag(Long id, String name, String serverId, String communityId, java.util.Date timeStamp, String syncStatus, Long profileId) {
        this.id = id;
        this.name = name;
        this.serverId = serverId;
        this.communityId = communityId;
        this.timeStamp = timeStamp;
        this.syncStatus = syncStatus;
        this.profileId = profileId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTagDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getServerId() {
        return serverId;
    }

    public void setServerId(String serverId) {
        this.serverId = serverId;
    }

    public String getCommunityId() {
        return communityId;
    }

    public void setCommunityId(String communityId) {
        this.communityId = communityId;
    }

    public java.util.Date getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(java.util.Date timeStamp) {
        this.timeStamp = timeStamp;
    }

    public String getSyncStatus() {
        return syncStatus;
    }

    public void setSyncStatus(String syncStatus) {
        this.syncStatus = syncStatus;
    }

    public Long getProfileId() {
        return profileId;
    }

    public void setProfileId(Long profileId) {
        this.profileId = profileId;
    }

    /** To-one relationship, resolved on first access. */
    public Profile getProfile() {
        Long __key = this.profileId;
        if (profile__resolvedKey == null || !profile__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProfileDao targetDao = daoSession.getProfileDao();
            Profile profileNew = targetDao.load(__key);
            synchronized (this) {
                profile = profileNew;
            	profile__resolvedKey = __key;
            }
        }
        return profile;
    }

    public void setProfile(Profile profile) {
        synchronized (this) {
            this.profile = profile;
            profileId = profile == null ? null : profile.getId();
            profile__resolvedKey = profileId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
