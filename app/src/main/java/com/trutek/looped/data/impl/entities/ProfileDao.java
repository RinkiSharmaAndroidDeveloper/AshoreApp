package com.trutek.looped.data.impl.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trutek.looped.data.impl.entities.Profile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE".
*/
public class ProfileDao extends AbstractDao<Profile, Long> {

    public static final String TABLENAME = "PROFILE";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property DateOfBirth = new Property(2, java.util.Date.class, "dateOfBirth", false, "DATE_OF_BIRTH");
        public final static Property About = new Property(3, String.class, "about", false, "ABOUT");
        public final static Property Interests = new Property(4, String.class, "interests", false, "INTERESTS");
        public final static Property JabberId = new Property(5, Long.class, "jabberId", false, "JABBER_ID");
        public final static Property IsMine = new Property(6, Boolean.class, "isMine", false, "IS_MINE");
        public final static Property ServerId = new Property(7, String.class, "serverId", false, "SERVER_ID");
        public final static Property TimeStamp = new Property(8, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property SyncStatus = new Property(9, Integer.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property Age = new Property(10, Integer.class, "age", false, "AGE");
        public final static Property PicUrl = new Property(11, String.class, "picUrl", false, "PIC_URL");
        public final static Property Gender = new Property(12, String.class, "gender", false, "GENDER");
        public final static Property Location = new Property(13, String.class, "location", false, "LOCATION");
        public final static Property Locationlat = new Property(14, String.class, "locationlat", false, "LOCATIONLAT");
        public final static Property Locationlng = new Property(15, String.class, "locationlng", false, "LOCATIONLNG");
    };

    private DaoSession daoSession;


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DATE_OF_BIRTH\" INTEGER," + // 2: dateOfBirth
                "\"ABOUT\" TEXT," + // 3: about
                "\"INTERESTS\" TEXT," + // 4: interests
                "\"JABBER_ID\" INTEGER," + // 5: jabberId
                "\"IS_MINE\" INTEGER," + // 6: isMine
                "\"SERVER_ID\" TEXT," + // 7: serverId
                "\"TIME_STAMP\" INTEGER," + // 8: timeStamp
                "\"SYNC_STATUS\" INTEGER," + // 9: syncStatus
                "\"AGE\" INTEGER," + // 10: age
                "\"PIC_URL\" TEXT," + // 11: picUrl
                "\"GENDER\" TEXT," + // 12: gender
                "\"LOCATION\" TEXT," + // 13: location
                "\"LOCATIONLAT\" TEXT," + // 14: locationlat
                "\"LOCATIONLNG\" TEXT);"); // 15: locationlng
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        java.util.Date dateOfBirth = entity.getDateOfBirth();
        if (dateOfBirth != null) {
            stmt.bindLong(3, dateOfBirth.getTime());
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(4, about);
        }
 
        String interests = entity.getInterests();
        if (interests != null) {
            stmt.bindString(5, interests);
        }
 
        Long jabberId = entity.getJabberId();
        if (jabberId != null) {
            stmt.bindLong(6, jabberId);
        }
 
        Boolean isMine = entity.getIsMine();
        if (isMine != null) {
            stmt.bindLong(7, isMine ? 1L: 0L);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(8, serverId);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp.getTime());
        }
 
        Integer syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindLong(10, syncStatus);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(11, age);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(12, picUrl);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(13, gender);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(14, location);
        }
 
        String locationlat = entity.getLocationlat();
        if (locationlat != null) {
            stmt.bindString(15, locationlat);
        }
 
        String locationlng = entity.getLocationlng();
        if (locationlng != null) {
            stmt.bindString(16, locationlng);
        }
    }

    @Override
    protected void attachEntity(Profile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateOfBirth
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // about
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // interests
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // jabberId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isMine
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // serverId
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // timeStamp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // syncStatus
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // age
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // picUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gender
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // location
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // locationlat
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // locationlng
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateOfBirth(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAbout(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInterests(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJabberId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsMine(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setServerId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setSyncStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAge(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPicUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGender(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLocationlat(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLocationlng(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Profile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Profile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
