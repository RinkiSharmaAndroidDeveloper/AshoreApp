package com.trutek.looped.data.impl.entities;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.trutek.looped.data.impl.entities.UserDao;
import com.trutek.looped.data.impl.entities.LocationDao;
import com.trutek.looped.data.impl.entities.InterestDao;
import com.trutek.looped.data.impl.entities.CategoryDao;
import com.trutek.looped.data.impl.entities.TagDao;
import com.trutek.looped.data.impl.entities.NotificationDao;
import com.trutek.looped.data.impl.entities.CommunityDao;
import com.trutek.looped.data.impl.entities.ActivityDao;
import com.trutek.looped.data.impl.entities.ProfileDao;
import com.trutek.looped.data.impl.entities.ConnectionDao;
import com.trutek.looped.data.impl.entities.RecipientDao;
import com.trutek.looped.data.impl.entities.DiseaseDao;
import com.trutek.looped.data.impl.entities.LoopDao;
import com.trutek.looped.data.impl.entities.DialogDao;
import com.trutek.looped.data.impl.entities.MessageDao;
import com.trutek.looped.data.impl.entities.AttachmentDao;
import com.trutek.looped.data.impl.entities.ChatUserDao;
import com.trutek.looped.data.impl.entities.DialogNotificationDao;
import com.trutek.looped.data.impl.entities.HealthChartDao;
import com.trutek.looped.data.impl.entities.HealthParamDao;
import com.trutek.looped.data.impl.entities.HealthParamLogDao;
import com.trutek.looped.data.impl.entities.ProviderDao;
import com.trutek.looped.data.impl.entities.CommentDao;
import com.trutek.looped.data.impl.entities.DialogUsersDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserDao.createTable(db, ifNotExists);
        LocationDao.createTable(db, ifNotExists);
        InterestDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        TagDao.createTable(db, ifNotExists);
        NotificationDao.createTable(db, ifNotExists);
        CommunityDao.createTable(db, ifNotExists);
        ActivityDao.createTable(db, ifNotExists);
        ProfileDao.createTable(db, ifNotExists);
        ConnectionDao.createTable(db, ifNotExists);
        RecipientDao.createTable(db, ifNotExists);
        DiseaseDao.createTable(db, ifNotExists);
        LoopDao.createTable(db, ifNotExists);
        DialogDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        AttachmentDao.createTable(db, ifNotExists);
        ChatUserDao.createTable(db, ifNotExists);
        DialogNotificationDao.createTable(db, ifNotExists);
        HealthChartDao.createTable(db, ifNotExists);
        HealthParamDao.createTable(db, ifNotExists);
        HealthParamLogDao.createTable(db, ifNotExists);
        ProviderDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        DialogUsersDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserDao.dropTable(db, ifExists);
        LocationDao.dropTable(db, ifExists);
        InterestDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        TagDao.dropTable(db, ifExists);
        NotificationDao.dropTable(db, ifExists);
        CommunityDao.dropTable(db, ifExists);
        ActivityDao.dropTable(db, ifExists);
        ProfileDao.dropTable(db, ifExists);
        ConnectionDao.dropTable(db, ifExists);
        RecipientDao.dropTable(db, ifExists);
        DiseaseDao.dropTable(db, ifExists);
        LoopDao.dropTable(db, ifExists);
        DialogDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        AttachmentDao.dropTable(db, ifExists);
        ChatUserDao.dropTable(db, ifExists);
        DialogNotificationDao.dropTable(db, ifExists);
        HealthChartDao.dropTable(db, ifExists);
        HealthParamDao.dropTable(db, ifExists);
        HealthParamLogDao.dropTable(db, ifExists);
        ProviderDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        DialogUsersDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserDao.class);
        registerDaoClass(LocationDao.class);
        registerDaoClass(InterestDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(TagDao.class);
        registerDaoClass(NotificationDao.class);
        registerDaoClass(CommunityDao.class);
        registerDaoClass(ActivityDao.class);
        registerDaoClass(ProfileDao.class);
        registerDaoClass(ConnectionDao.class);
        registerDaoClass(RecipientDao.class);
        registerDaoClass(DiseaseDao.class);
        registerDaoClass(LoopDao.class);
        registerDaoClass(DialogDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(AttachmentDao.class);
        registerDaoClass(ChatUserDao.class);
        registerDaoClass(DialogNotificationDao.class);
        registerDaoClass(HealthChartDao.class);
        registerDaoClass(HealthParamDao.class);
        registerDaoClass(HealthParamLogDao.class);
        registerDaoClass(ProviderDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(DialogUsersDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
